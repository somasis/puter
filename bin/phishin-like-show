#!/usr/bin/env bash
#!/usr/bin/env nix-shell
#! nix-shell -i bash -p bash coreutils curl jq
# shellcheck shell=bash

# keep-sorted start skip_lines=1 prefix_order=type,,>,||
type \
    curl \
    jq \
    phishin-auth-token \
    >/dev/null \
    || exit 1
# keep-sorted end

set -euo pipefail

usage() {
    # shellcheck disable=SC2059
    [[ "$#" -eq 0 ]] || printf "$@" >&2

    cat >&2 <<EOF
usage: ${0##*/} <show...>

Like a given show on Phish.in.

options:
    <show>          An ISO formatted date (ex. 1969-12-31)

see also: phishin-like-show, phishin-auth-token, phish-list-shows.

Kylie McClain <kylie@somas.is>
EOF
    [[ "$#" -eq 0 ]] || exit 1
    exit 64 # EX_USAGE
}

phishin_auth() {
    local -
    set +x
    : "${PHISHIN_USER_TOKEN:=$(phishin-auth-token)}" || exit 1
    export PHISHIN_USER_TOKEN
}

curl() {
    command curl \
        --no-progress-meter \
        --location \
        --user-agent 'phish-cli <kylie@somas.is>' \
        "$@"
}

curl_authed() {
    # shellcheck disable=SC2016
    [[ -v PHISHIN_USER_TOKEN ]] || usage 'error: no $PHISHIN_USER_TOKEN set\n'

    curl \
        --variable %PHISHIN_USER_TOKEN \
        --expand-header 'X-Auth-Token: {{PHISHIN_USER_TOKEN}}' \
        "${@?curl_authed(): no arguments given}"
}

[[ "${1:-}" == --help ]] && usage

[[ "$#" -gt 0 ]] || usage 'error: no arguments provided\n'

for show_date; do
    [[ "$show_date" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]] \
        || usage 'error: show argument is not an ISO format date: %s\n' "$show_date"
done

phishin_auth

errors=0
for show_date; do
    # /likes requires the show ID be given, not a date
    show_id=$(curl --fail-with-body "https://phish.in/api/v2/shows/${show_date}")
    show_id=$(jq -ce '.id' <<<"${show_id}")

    result=$(
        jq -nc --argjson show_id "${show_id}" \
            '{"likable_type": "Show", "likable_id": $show_id}' \
            | curl_authed -X POST --json @- "https://phish.in/api/v2/likes"
    )

    if jq -cre --arg show_date "$show_date" '.id' <<<"$result" >/dev/null; then
        printf '%s\n' "$show_date"
    else
        errors=$((errors + 1))
        printf 'error: failed while liking show %s (id: %i)\n' "$show_date" "$show_id" >&2
    fi
done

if [[ "$errors" -gt 0 ]]; then
    exit 1
fi
