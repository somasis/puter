#!/usr/bin/env bash
#!/usr/bin/env nix-shell
#! nix-shell -i bash -p bash libnotify jq sed xurls
# shellcheck shell=bash
# vim: ft=sh

set -euo pipefail

# shellcheck disable=SC2120
usage() {
    # shellcheck disable=SC2059
    [[ "$#" -eq 0 ]] || printf "$@" >&2

    cat >&2 <<EOF
usage: ntfy subscribe <topic> ${0##*/}

Show a desktop notification sent to ntfy.sh, using \`notify-send\`. How this
differs from just using \`notify-send "\$NTFY_TITLE" "\$NTFY_MESSAGE"\`,
is that this script takes care to translate the ntfy.sh notification metadata
to its freedesktop.org notification specification equivalents.

Example usage in ${XDG_CONFIG_HOME:-$HOME/.config}/ntfy/client.yaml:
\`\`\`yaml
default-command: ${0##*/}

# and/or

subscribe:
  - topic: zfs-scrubs
    command: ${0##*/}
\`\`\`

environment variables:
    \$XDG_CONFIG_HOME${XDG_CONFIG_HOME:+ (current: ${XDG_CONFIG_HOME@Q})}
    \$NTFY_MESSAGE, \$NTFY_PRIORITY, \$NTFY_RAW, \$NTFY_TAGS, \$NTFY_TITLE
        These variables should be set when invoked by \`ntfy subscribe\`.

Kylie McClain <kylie@somas.is>
EOF
    [[ "$#" -eq 0 ]] || exit 1
    exit 64 # EX_USAGE
}

case "${1:-}" in
    --help) usage ;;
esac

: "${NTFY_RAW?error: \$NTFY_RAW was not set; are you running this script from within \`ntfy subscribe\`?}"
: "${NTFY_ID:=}"
: "${NTFY_MESSAGE:=}"
: "${NTFY_TITLE:=}"
: "${NTFY_TAGS:=}"
: "${NTFY_PRIORITY:=0}"

message_is_markdown=$(
    jq -re '.content_type == "text/markdown"' <<<"${NTFY_RAW}"
)

args=()

app_name=ntfy
title=
urgency=

case "${NTFY_PRIORITY}" in
    1) urgency=low ;;
    2)
        args+=(--transient)
        urgency=low
        ;;
    0 | 3) urgency=normal ;;
    4) urgency=normal ;;
    5) urgency=critical ;;
    *)
        printf 'error: invalid priority: %s\n' "${NTFY_PRIORITY}" >&2
        exit 64
        ;;
esac

case "${NTFY_TITLE}" in
    *': '*)
        app_name=${NTFY_TITLE%%: *}
        title=${NTFY_TITLE#*: }
        ;;
    *' - '*)
        app_name=${NTFY_TITLE%% - *}
        title=${NTFY_TITLE#* - }
        ;;
    *)
        title="${NTFY_TITLE:-${NTFY_TAGS%%,*}}"
        ;;
esac

: "${app_name:=${NTFY_TOPIC}}"

args+=(
    ${urgency:+--urgency="$urgency"}
    ${app_name:+--app-name="$app_name"}
)

message="$NTFY_MESSAGE"
if [[ "$message_is_markdown" == true ]]; then
    # Hastily translate Markdown into Pango markup
    # TODO there's this tool that would (kinda) fit the job, is it any good?
    # <https://world.pages.gitlab.gnome.org/html2pango/html2pango/>
    message=$(
        # shellcheck disable=SC2016
        <<<"$message" sed -E \
            -e '/^# / { s:# :<big><big><big><big>:; s:$:</big></big></big></big>:; }' \
            -e '/^## / { s:## :<big><big><big>:; s:$:</big></big></big>:; }' \
            -e '/^### / { s:### :<big><big>:; s:$:</big></big>:; }' \
            -e '/^#### / { s:#### :<big>:; s:$:</big>:; }' \
            -e '/^##### / { s:##### :<big>:; s:$:</big>:; }' \
            -e '/^###### / { s:###### :<big>:; s:$:</big>:; }' \
            -e 's:\*\*\*(.+)\*\*\*:<i><b>\1</b></i>:g' \
            -e 's:___(.+)___:<i><b>\1</b></i>:g' \
            -e 's:\*\*(.+)\*\*:<b>\1</b>:g' \
            -e 's:__(.+)__:<b>\1</b>:g' \
            -e 's:\*(.+)\*:<i>\1</i>:g' \
            -e 's:(\W*)_(.+)_(\W*):\1<i>\2</i>\3:g' \
            -e 's,([^!]?)\[([^\]]+)\]\((\S+)\),<a href=\3>\2</a>,g' \
            -e 's,!\[([^\]]+)\]\((\S+)\),<a href=\2>\1 (image)</a>,g' \
            -e 's:`(.+)`:<tt>\1</tt>:g'
    )

    # We can't use a Markdown interpreter and just translate it to HTML
    # and then cull unsupported tags because that'd open an even bigger
    # can of worms, I guess...
    # message=$(
    #     pandoc \
    #         -f markdown_strict-raw-html \
    #         -t html-empty_paragraphs-line_blocks-native_divs-native_spans-auto_identifiers \
    #         -o - \
    #         <<<"$message"
    # )
else
    mapfile -t urls < <(xurls <<<"${message}")

    for url in "${urls[@]}"; do
        url_hyperlink="<a href=${url}>${url}</a>"
        message=${message/"$url"/"$url_hyperlink"}
    done
fi

click=$(jq -rc '.click // ""' <<<"${NTFY_RAW}" || :)

if [[ -n "${click:-}" ]]; then
    args+=(--action=click=Open)
    args+=(--expire-time=$((60 * 1000)))
fi

(
    action=$(
        notify-send "${args[@]}" -- \
            "${title}" \
            "${message}"
    )

    case "${action}" in
        click)
            xdg-open "${click}" &
            disown
            ;;
    esac
) &
disown
