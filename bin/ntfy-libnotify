#!/usr/bin/env bash
#!/usr/bin/env nix-shell
#! nix-shell -i bash -p bash libnotify jq sed xurls
# shellcheck shell=bash
# vim: ft=sh

# Use notify-send to display notifications from ntfy.sh. To use this, the
# client.yml used by `ntfy subscribe` should contain
# "default-command: ntfy-libnotify". xurls is used to extract any URLs from the
# message, which are made into actions that the user can click on in the
# notification.

set -euo pipefail

command -V jq notify-send sed xdg-open xurls >/dev/null

: "${NTFY_ID:=}"
: "${NTFY_TIME:=}"
: "${NTFY_TOPIC:=}"
: "${NTFY_MESSAGE:=}"
: "${NTFY_TITLE:=}"
: "${NTFY_PRIORITY:=}"
: "${NTFY_TAGS:=}"
: "${NTFY_RAW:=}"

args=()

click=$(jq -rc '.click // ""' <<<"${NTFY_RAW}" || :)

case "${NTFY_PRIORITY:-3}" in
    1) priority=low ;;
    2) args+=( --transient ); priority=low ;;
    3) priority=normal ;;
    4) priority=normal ;;
    5) priority=critical ;;
    *)
        printf 'error: invalid priority: %s\n' "${NTFY_PRIORITY}" >&2
        exit 64
        ;;
esac

case "${NTFY_TITLE}" in
    *': '*)
        appname=${NTFY_TITLE%%: *}
        title=${NTFY_TITLE#*: }
        ;;
    *' - '*)
        appname=${NTFY_TITLE%% - *}
        title=${NTFY_TITLE#* - }
        ;;
    *) title="${NTFY_TITLE:-${NTFY_TAGS%%,*}}" ;;
esac

message="${NTFY_MESSAGE}"

args+=(
    ${priority:+-u "$priority"}
    -a "${appname:-ntfy.sh}"
)

mapfile -t urls < <(xurls <<<"${message}")

for url in "${urls[@]}"; do
    url_hyperlink="<a href=${url}>${url}</a>"
    message=${message/"$url"/"$url_hyperlink"}
done

if [[ -n "${click:-}" ]]; then
    args+=(-A click=Open)
    args+=(--expire-time $((60 * 1000)))
fi

(
    action=$(notify-send "${args[@]}" ${title:+"${title}"} "${message}")

    case "${action}" in
        click)
            xdg-open "${click}" &
            disown
            ;;
    esac
) &
disown
