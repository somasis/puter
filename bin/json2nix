#!/usr/bin/env bash
#!/usr/bin/env nix-shell
#! nix-shell -i bash -p bash coreutils nix nixfmt
# shellcheck shell=bash disable=SC2016

usage() {
    # shellcheck disable=SC2059
    [[ $# -eq 0 ]] || printf "$@" >&2

    cat >&2 <<'EOF'
Convert JSON input to Nix language declarations.

Conversion is done by calling directly to the `builtins.fromJSON` function
included with Nix.

Output will be formatted with `nixfmt` if standard output is a terminal.

usage: json2nix <file>...
       json2nix [-]
EOF

    [[ $# -eq 0 ]] || exit 1
    exit 69
}

format() {
    if [[ -t 1 ]]; then
        nixfmt -w 120
    else
        cat
    fi
}

while getopts : opt >/dev/null 2>&1; do
    case "${opt}" in
        ?) usage 'unknown option -- %s\n' "${OPTARG@Q}" ;;
    esac
done
shift $((OPTIND - 1))

# Default to standard input.
[[ $# -gt 0 ]] || set -- -

for given_path; do
    real_path="$given_path"

    if [[ "$given_path" == '-' ]] || [[ "$given_path" == '/dev/stdin' ]]; then
        given_path=-
    fi

    if [[ "$given_path" == '-' ]] || [[ -p "$given_path" ]]; then
        # Write standard input to a temporary file.
        real_path=$(mktemp) || exit 1
        cat >"$real_path"
    fi

    # `builtins.readFile` only wants absolute paths
    real_path=$(readlink -f -- "$real_path")

    error=0

    output=$(
        nix-instantiate --eval \
            --readonly-mode \
            --strict \
            --argstr realPath "${real_path}" \
            --expr '{ realPath }: builtins.fromJSON (builtins.readFile realPath)'
    ) || error=$?

    if [[ ${error} -ne 0 ]]; then
        # shellcheck disable=SC2016
        usage 'error: `nix-instantiate` failed while converting %s from JSON (error code: %i)\n' \
            "${given_path@Q}" \
            "${error}"
    fi

    format <<<"${output}"

    case "${given_path}" in
        '-') rm -f "$real_path" ;;
    esac
done
