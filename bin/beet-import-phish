#!/usr/bin/env bash
#!/usr/bin/env nix-shell
#! nix-shell -i bash -p bash coreutils jq
# shellcheck shell=bash

# keep-sorted start skip_lines=1 prefix_order=type,,>,||
type \
    jq \
    phish-download-show \
    phish-show-notes \
    >/dev/null \
    || exit 1
# keep-sorted end

set -euo pipefail

: "${XDG_DOWNLOAD_DIR:=$HOME/Downloads}"
: "${BEET_IMPORT_PHISH_DOWNLOAD_DIR:=$XDG_DOWNLOAD_DIR}"

usage() {
    # shellcheck disable=SC2059
    [[ "$#" -eq 0 ]] || printf "$@" >&2

    cat >&2 <<EOF
usage: ${0##*/} [-v] <show ...>

Download a Phish show from Phish.in's database of recordings into a
predetermined download directory using \`phish-download-show\`.
Display its setlist notes from Phish.net using \`phish-show-notes\`.
Then, import the show recording into the Beets library using
\`beet import --noautotag\`, enhancing the album tags in the process.

options:
    -v              Be more verbose, printing commands as they are ran.
    <show>          An ISO formatted date (ex. 1969-12-31)

environment variables:
    \$BEET_IMPORT_PHISH_DOWNLOAD_DIR${BEET_IMPORT_PHISH_DOWNLOAD_DIR:+ (current: ${BEET_IMPORT_PHISH_DOWNLOAD_DIR@Q})}
        The directory to which shows should be downloaded into.
        If unset, shows will be downloaded into \$XDG_DOWNLOAD_DIR.
    \$XDG_DOWNLOAD_DIR${XDG_DOWNLOAD_DIR:+ (current: ${XDG_DOWNLOAD_DIR@Q})}

see also: beet import, phish-download-show.

Kylie McClain <kylie@somas.is>
EOF
    [[ "$#" -eq 0 ]] || exit 1
    exit 64 # EX_USAGE
}

edo() {
    local arg string
    string="$"
    for arg; do
        if [[ "${arg@Q}" == "'$arg'" ]] && ! [[ "${arg}" =~ [[:blank:]] ]]; then
            string+=" $arg"
        else
            string+=" ${arg@Q}"
        fi
    done

    if [[ "${verbosity}" -ge 1 ]]; then
        printf '%s\n' "$string" >&2 || :
    fi

    "$@"
}

phishin() {
    jq -cr "$@" "${download_dir?phishin(): no download_dir set yet}/phishin.json"
}

verbosity=
while getopts :v opt; do
    case "$opt" in
        v) verbosity=$((${verbosity:-0} + 1)) ;;
        ?) usage '' ;;
    esac
done
shift $((OPTIND - 1))

[[ "${1:-}" == --help ]] && usage

if [[ "$#" -le 0 ]]; then
    usage 'error: must provide at least one argument\n'
fi

for show_date; do
    if ! [[ "${show_date}" =~ ^([0-9]{4,})-([0-9]{2})-([0-9]{2})$ ]]; then
        usage 'error: show must be an ISO-formatted date (1969-12-31)\n'
    fi
done

if ! cd "${BEET_IMPORT_PHISH_DOWNLOAD_DIR}"; then
    exit $?
fi

beet_args=(
    # Require -vv for `beet` verbosity
    $(for _ in $(seq 2 "${verbosity:-0}"); do printf -- '-v\n'; done)
)

for show_date; do
    year=
    month=
    day=

    [[ "${show_date}" =~ ^([0-9]{4,})-([0-9]{2})-([0-9]{2})$ ]] \
        && year=${BASH_REMATCH[1]} \
        && month=${BASH_REMATCH[2]} \
        && day=${BASH_REMATCH[3]} \
        || exit 1

    edo phish-show-notes "${show_date}"

    download_dir=$(edo phish-download-show ${verbosity:+-v} "${show_date}")

    phishin_id=$(phishin '.id')

    location=$(phishin '.venue | [ .name, .location ] | join(", ")')
    tour=$(phishin '.tour_name') || :

    beet_import_args=(
        --copy
        --flat
        --quiet
        --quiet-fallback=asis
        --noautotag
        --write
        --noincremental

        --set=art_source='Phish.in'
        --set=data_source='Phish.in'
        --set=phishin_id="${phishin_id}"
        --set=comments_source='Phish.in'
        --set=label='Phish.in'
        --set=media='Digital Media'

        ${tour:+"--set=grouping=Phish ${tour}"}

        --set=albumartist='Phish'
        --set=albumartist_sort='Phish'
        --set=albumstatus='Bootleg'

        # FIXME `beet write` will always try to write these tags to the files
        # and seemingly fail if these are set!
        # --set=albumtype='live'
        # --set=albumtypes='live; album'

        ${location:+"--set=location=${location}"}

        --set=year="${year}"
        --set=month="${month}"
        --set=day="${day}"
        --set=original_year="${year}"
        --set=original_month="${month}"
        --set=original_day="${day}"

        --set=added="$(date +%Y-%m-%dT%H:%M:%S%:z)"
    )

    touch "${download_dir}"/*

    edo beet "${beet_args[@]}" import "${beet_import_args[@]}" "${download_dir}" >&2
done
