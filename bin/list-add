#!/usr/bin/env nix-shell
#! nix-shell -i bash -p bash coreutils gnugrep util-linuxMinimal
# shellcheck shell=bash

set -euo pipefail

usage() {
    cat >&2 <<EOF
usage: list-add [-v] [-C <date>] [-D <date>] [-P <priority>] [-c <context>]
                [-f <file>] [-p <project>] task...
EOF
    exit 69
}

created_date=$(date +%Y-%m-%d)
due_date=
file=todo.txt
contexts=
projects=
priority=
set_uuid=false
verbose=false

while getopts :C:D:P:c:f:p:uv arg >/dev/null; do
    case "${arg}" in
        C)
            { printf '%s\n' "${OPTARG}" | grep -Eq "^([0-9]{4}-[0-9]{2}-[0-9]{2}|)$"; } || usage
            created_date="${OPTARG}"
            ;;
        D)
            { printf '%s\n' "${OPTARG}" | grep -Eq "^[0-9]{4}-[0-9]{2}-[0-9]{2}$"; } || usage
            due_date="${OPTARG}"
            ;;
        P)
            case "${OPTARG}" in
                [ABCDEFGHIJKLMNOPQRSTUVWXYZ]) : ;;
                *) usage ;;
            esac
            priority="${OPTARG}"
            ;;
        c) contexts="${contexts:+${contexts} }@${OPTARG}" ;;
        f) file="${OPTARG}" ;;
        p) projects="${projects:+${projects} }+${OPTARG}" ;;
        u) set_uuid=true ;;
        v) verbose=true ;;
        *) usage ;;
    esac
done
shift $((OPTIND - 1))

[[ $# -gt 0 ]] || usage

task=
while [[ $# -gt 0 ]]; do
    [[ "${set_uuid}" = 'true' ]] && set_uuid=$(uuidgen)
    task="${priority:+${priority} }${created_date:+${created_date} }${1}${due_date:+ due:$due_date}${contexts:+ ${contexts}}${projects:+ ${projects}}${uuid:+ uuid:${uuid}}"
    printf '%s\n' "${task}" >>"${file}"
    "${verbose}" && printf '%s\n' "${task}"
    uuid=
    shift
done
